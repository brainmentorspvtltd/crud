{"version":3,"sources":["logo.svg","components/Login.js","components/Details.js","models/Question.js","models/QuestionOperation.js","components/Question.js","components/List.js","containers/Crud.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Login","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","message","inherits","createClass","key","value","userid","refs","pwd","updateLoginStatus","setState","react_default","a","createElement","className","htmlFor","type","ref","placeholder","onClick","checkLogin","bind","React","Component","Details","onChange","takeInputId","takeInputName","add","deleteRec","Question","id","name","isMarked","questionOperations","questions","question","push","console","log","deleteRecords","filter","questionObject","markRecord","searchById","toggle","find","ques","_this2","markUnMark","List","list","map","components_Question_Question","giveMeSelectedQuestionId","Crud","rowColor","currentId","event","target","questionsArray","userName","Details_Details","List_List","App","isLogin","loginStatus","uid","Crud_Crud","Login_Login","isAuth","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86a3a53e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nexport class Login extends React.Component{\nconstructor(props){\n    super(props);\n    this.state = {message : ''};\n    \n\n}\ncheckLogin(){\n    //console.log(\"CheckLogin Called...\",this.refs.userid.value);\n    var userid= this.refs.userid.value;\n    var pwd =this.refs.pwd.value;\n    if(userid==pwd){\n        this.props.updateLoginStatus(true, userid);\n    }\n    else{\n        this.setState({message:'Invalid Userid or Password'});\n    }\n    \n}\nrender(){\n    return(\n    <div>\n        <h3 className=\"alert-danger\">{this.state.message}</h3>\n        <div className='form-group'>\n            <label htmlFor=\"\"></label>\n            <input type=\"text\" className='form-control' ref='userid' placeholder='Type Userid Here '/>\n        </div>\n        <div className='form-group'>\n            <label htmlFor=\"\"></label>\n            <input type=\"password\" className='form-control' ref='pwd' placeholder='Type Password Here '/>\n        </div>\n        <div className='form-group'>\n            <button onClick={this.checkLogin.bind(this)} className='btn btn-primary'>Login</button>&nbsp;\n            <button className='btn btn-dark'>Clear All</button>\n        </div>\n\n    </div>\n    );\n}\n}","import React from \"react\";\nexport const Details = props => {\n  return (\n    <div>\n      <div className=\"form-group\">\n        <label htmlFor=\"\">Id</label>\n        <input\n          type=\"text\"\n          onChange={props.takeInputId}\n          className=\"form-control\"\n          placeholder=\"Type Question Id\"\n        />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"\">Name</label>\n        <input\n          type=\"text\"\n          onChange={props.takeInputName}\n          className=\"form-control\"\n          placeholder=\"Type Question Name\"\n        />\n      </div>\n      <div className=\"btn-group btn-group-justified\">\n        <button onClick={props.add} className=\"btn btn-primary\">Add</button>\n        <button onClick={props.deleteRec} className=\"btn btn-danger\">Delete</button>\n        <button className=\"btn btn-info\">Save</button>\n        <button className=\"btn btn-dark\">Load</button>\n        <button className=\"btn btn-warning\">Search</button>\n        <button className=\"btn btn-dark\">Sort</button>\n        <button className=\"btn btn-info\">Clear All</button>\n      </div>\n    </div>\n  );\n};\n","export class Question{\n    constructor(id, name){\n        this.id = id;\n        this.name = name;\n        this.isMarked = false;\n    }\n    toggle(){\n        this.isMarked = !this.isMarked;\n        return this.isMarked;\n    }\n}","import { Question } from \"./Question\";\n\nexport const questionOperations = {\n    questions:[],\n    add(id , name){\n         var question = new Question(id,name);   \n        this.questions.push(question);\n        console.log(\"Record added in array \",this.questions);\n        },\n        deleteRecords(){\n            this.questions = this.questions.filter(questionObject=>questionObject.isMarked==false);\n            return this.questions;\n        },\n        markRecord(id){\n            return this.searchById(id).toggle();\n        },\n        searchById(id){\n            return this.questions.find(questionObject=>questionObject.id==id);\n        }\n}","import React from 'react';\n\nexport class Question extends React.Component{\n\n    constructor(props){\n        super(props);\n        //this.mark = false;\n        //this.class = '';\n        this.state = {ques:{}};\n        console.log(\"Cons Call \",this.state);\n        }\n        markUnMark(id){\n            //this.mark = !this.mark;\n            //this.class= this.mark?'table-danger':'';\n            //this.setState({isMarked:this.mark});\n            //console.log(\"Mark Call::::: \",id,\"Mark is \",this.mark, \" State \",this.state.isMarked);\n            this.props.question.toggle();\n            this.setState({ques:this.props.question});\n            console.log(this.props.question, \" \",this.state);\n            //this.class='';\n            \n            //this.props.giveMeSelectedQuestionId(id);\n        }\n\nrender(){\nreturn(\n    \n        <tr className={ this.props.question.isMarked?'table-danger':'table-default'} key={this.props.question.id}>\n        \n            <td>{this.props.question.id}</td>\n            <td>{this.props.question.name}</td>\n            <td><i className=\"fas fa-trash\" onClick={()=>this.markUnMark(this.props.question.id)}></i></td>\n        </tr>\n    \n)\n}\n}","import React from 'react';\nimport {Question} from './Question';\nexport const List =(props)=> {\n\nreturn(\n    <div>\n        <table className='table table-striped'>\n            <thead className='thead-dark'>\n                <tr>\n                    <th>Id</th>\n                    <th>Name</th>\n                    <th>Operations</th>\n                </tr>\n            </thead>\n            <tbody>\n                \n                {props.list.map((questionObject,id)=>{\n                    //console.log(\"State \",this.state.isMarked);\n                    return <Question giveMeSelectedQuestionId={props.giveMeSelectedQuestionId}  key={id} question= {questionObject}/>})}\n                \n            </tbody>\n        </table>\n    </div>\n);\n}\n","import React from 'react';\nimport {Details} from '../components/Details';\nimport {questionOperations} from '../models/QuestionOperation';\nimport {List} from '../components/List';\nexport class Crud extends React.Component{\n    constructor(props){\n        super(props);\n       // this.currentId = 0;\n       this.id = 0;\n       this.name = '';\n        this.state  = {questionObject:{},questions:[],rowColor:''};\n    }\n    giveMeSelectedQuestionId(currentId){\n        console.log(\"Current Id is \",currentId);\n        //this.currentId= currentId;\n        var isMarked = questionOperations.markRecord(currentId);\n        console.log(\"After Marked \",questionOperations.questions);\n        //var color = isMarked?'table-danger':'';\n       // this.setState({...this.state,rowColor:color});\n    }\n    takeInputName(event){\n        this.name = event.target.value;\n    }\n    takeInputId(event){\n        this.id = event.target.value;\n       /* console.log(\"Key is \",key,\" Event is \",event);\n        var obj = this.state.questionObject;\n        obj[key] = event.target.value;\n        this.setState({questionObject:obj,questions:[]});\n        console.log(\"After Take Input object is  \",this.state.questionObject);\n        */\n\n    }\n    add(){\n        questionOperations.add(this.id,this.name);\n        this.setState({questions:questionOperations.questions});\n        //this.setState({...this.state,questionObject:{},questions:questionOperations.questions});\n        console.log(\"Add \",questionOperations.questions);\n    }\n    deleteRec(){\n        console.log(\"Array is \",questionOperations.questions);\n        var questionsArray = questionOperations.deleteRecords();\n        console.log(\"After delete record are  \",questionsArray);\n        this.setState({questions:questionsArray});\n    }\n    render(){\n        return(\n            <div>\n                <h4>Welcome , {this.props.userName}</h4>\n                <Details takeInputName={this.takeInputName.bind(this)} takeInputId = {this.takeInputId.bind(this)} deleteRec={this.deleteRec.bind(this)} add={this.add.bind(this)}/>\n                <List  giveMeSelectedQuestionId={this.giveMeSelectedQuestionId.bind(this)} list={this.state.questions}/>\n                \n            </div>\n        )\n}\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport {Login} from './components/Login';\nimport {Crud} from './containers/Crud';\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {isLogin:false,userName:''};\n  }\n  isAuth(loginStatus,uid){\n    this.setState({isLogin:loginStatus,userName:uid});\n  }\n  render() {\n    return (\n     <div className='container'>\n       <h1 className='alert-success'>CRUD App Demo</h1>\n       {this.state.isLogin?<Crud userName = {this.state.userName}/>:<Login updateLoginStatus={this.isAuth.bind(this)}/>}\n       \n     </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}